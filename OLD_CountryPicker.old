import React, { Component } from 'react'
import PropTypes from 'prop-types'

import {
  View,
  Image,
  TouchableOpacity,
  Modal,
  Text,
  TextInput,
  FlatList,
  ScrollView,
  Platform,
  SafeAreaView,
  StyleProp,
  ViewStyle,
  ImageProps,
  KeyboardAvoidingView,
  StyleSheet,
  PixelRatio,
  ListRenderItemInfo
} from 'react-native'

import Fuse from 'fuse.js'

import cca2List from '../data/cca2.json'
import { getHeightPercent } from './ratio'
import CloseButton from './CloseButton'

import {
  CCA2Code,
  Country,
  TranslationLanguageCode,
  AnimationType,
  FlagType,
  FuseCountry
} from '../types.js'

let countries: any = null
let Emoji: any = null
const styles = StyleSheet.create({
  container: {},
  modalContainer: {
    backgroundColor: 'white',
    flex: 1
  },
  contentContainer: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-between',
    backgroundColor: 'white'
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  input: {
    height: 48,
    width: '70%'
  },
  inputOnly: {
    marginLeft: '15%'
  },
  touchFlag: {
    alignItems: 'flex-start',
    justifyContent: 'flex-start'
  },
  imgStyle: {
    resizeMode: 'contain',
    width: 25,
    height: 19,
    borderWidth: 1 / PixelRatio.get(),
    borderColor: '#eee',
    opacity: 0.8
  },
  emojiFlag: {
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: 30,
    borderWidth: 1 / PixelRatio.get(),
    borderColor: 'transparent',
    backgroundColor: 'transparent'
  },
  itemCountry: {
    flexDirection: 'row',
    height: getHeightPercent(7),
    justifyContent: 'flex-start',
    alignItems: 'center',
    paddingHorizontal: 5
  },
  itemCountryFlag: {
    justifyContent: 'center',
    alignItems: 'center',
    width: 30,
    marginRight: 10
  },
  itemCountryName: {
    justifyContent: 'space-between',
    flexDirection: 'row',
    width: '100%',
    borderBottomWidth: 2 / PixelRatio.get(),
    borderBottomColor: '#ccc'
  },
  countryName: {
    fontSize: getHeightPercent(2.2)
  },
  countryCode: {
    textAlign: 'right'
  },
  scrollView: {
    flex: 1
  },
  letters: {
    marginRight: 10,
    backgroundColor: 'transparent',
    justifyContent: 'center',
    alignItems: 'center'
  },
  letter: {
    height: 25,
    width: 20,
    justifyContent: 'center',
    alignItems: 'center'
  },
  letterText: {
    textAlign: 'center',
    fontSize: getHeightPercent(2.2)
  },
  closeButton: {
    height: 48,
    width: '15%',
    alignItems: 'center',
    justifyContent: 'center'
  },
  closeButtonImage: {
    height: 24,
    width: 24,
    resizeMode: 'contain'
  }
})

let isEmojiable = Platform.OS === 'ios'

const FLAG_TYPES = {
  flat: 'flat',
  emoji: 'emoji'
}

const setCountries = (flagType?: string) => {
  if (typeof flagType !== 'undefined') {
    isEmojiable = flagType === FLAG_TYPES.emoji
  }

  if (isEmojiable) {
    countries = require('../data/countries-emoji.json')
    Emoji = require('./emoji').default
  } else {
    countries = require('../data/countries.json')
    Emoji = <View />
  }
}

setCountries()

export const getAllCountries = () =>
  cca2List.map(cca2 => ({ ...countries[cca2], cca2 }))

const renderEmojiFlag = (cca2: string, emojiStyle: object) => (
  <Text style={[styles.emojiFlag, emojiStyle]} allowFontScaling={false}>
    {cca2 !== '' && countries[cca2.toUpperCase()] ? (
      <Emoji name={countries[cca2.toUpperCase()].flag} />
    ) : null}
  </Text>
)

const renderImageFlag = (cca2: string, imageStyle: object) =>
  cca2 !== '' ? (
    <Image
      resizeMode={'contain'}
      style={[styles.imgStyle, imageStyle]}
      source={{ uri: countries[cca2].flag }}
    />
  ) : null

const renderFlag = (
  cca2: string,
  itemStyle: object,
  emojiStyle: object,
  imageStyle: object
) => (
  <View style={[styles.itemCountryFlag, itemStyle]}>
    {isEmojiable
      ? renderEmojiFlag(cca2, emojiStyle)
      : renderImageFlag(cca2, imageStyle)}
  </View>
)

const renderFlagWithName = (
  cca2: string,
  countryName: string,
  itemStyle: object,
  emojiStyle: object,
  imageStyle: object
) => (
  <View
    style={{ flexDirection: 'row', flexWrap: 'wrap', alignItems: 'center' }}
  >
    <View style={[styles.itemCountryFlag, itemStyle]}>
      {isEmojiable
        ? renderEmojiFlag(cca2, emojiStyle)
        : renderImageFlag(cca2, imageStyle)}
    </View>
    <Text style={{ fontSize: 16 }}>{countryName}</Text>
  </View>
)

interface CountryPickerProps {
  cca2: CCA2Code
  onChange: (value: Country) => void
  style?: StyleProp<ViewStyle>
  showCallingCode?: boolean
  onClose?: () => void
  countryList?: CCA2Code[]
  translation?: TranslationLanguageCode
  closeable?: boolean
  filterable?: boolean
  excludeCountries?: CCA2Code[]
  filterPlaceholder?: string
  autoFocusFilter?: boolean
  disabled?: boolean
  filterPlaceholderTextColor?: string
  closeButtonImage?: ImageProps['source']
  transparent?: boolean
  animationType?: AnimationType
  flagType?: FlagType
  hideAlphabetFilter?: boolean
  showCountryNameWithFlag?: boolean
  filterOptions?: object
  hideCountryFlag?: boolean
}

interface CountryPickerState {
  cca2List?: CCA2Code[]
  modalVisible: boolean
  flatListMap: any[]
  filter: string | ''
  letters: string[]
}

export class CountryPicker extends Component<
  CountryPickerProps,
  CountryPickerState
> {
  static propTypes = {
    cca2: PropTypes.string.isRequired,
    translation: PropTypes.string,
    onChange: PropTypes.func.isRequired,
    onClose: PropTypes.func,
    closeable: PropTypes.bool,
    filterable: PropTypes.bool,
    children: PropTypes.node,
    countryList: PropTypes.array,
    excludeCountries: PropTypes.array,
    styles: PropTypes.object,
    filterPlaceholder: PropTypes.string,
    autoFocusFilter: PropTypes.bool,
    disabled: PropTypes.bool,
    filterPlaceholderTextColor: PropTypes.string,
    closeButtonImage: PropTypes.oneOfType([PropTypes.number, PropTypes.object]),
    transparent: PropTypes.bool,
    animationType: PropTypes.oneOf(['slide', 'fade', 'none']),
    flagType: PropTypes.oneOf(Object.values(FLAG_TYPES)),
    hideAlphabetFilter: PropTypes.bool,
    hideCountryFlag: PropTypes.bool,
    renderFilter: PropTypes.func,
    showCallingCode: PropTypes.bool,
    filterOptions: PropTypes.object,
    showCountryNameWithFlag: PropTypes.bool
  }

  static defaultProps = {
    translation: 'eng',
    countryList: cca2List,
    hideCountryFlag: false,
    excludeCountries: [],
    filterPlaceholder: 'Filter',
    autoFocusFilter: true,
    transparent: false,
    animationType: 'none'
  }

  _flatList = React.createRef<FlatList<any>>()
  fuse: any
  visibleListHeight?: number
  // dimensions of country list and window
  itemHeight: number = getHeightPercent(7)
  listHeight: number = countries.length * this.itemHeight

  constructor(props: CountryPickerProps) {
    super(props)

    setCountries(props.flagType)
    const { countryList, excludeCountries } = props
    if (excludeCountries && countryList) {
      excludeCountries.forEach(excludeCountry => {
        const index = countryList.indexOf(excludeCountry)

        if (index !== -1) {
          countryList.splice(index, 1)
        }
      })
    }

    // Sort country list
    const newCountryList = countryList!
      .map(c => [c, this.getCountryName(countries[c])])
      .sort((a, b) => {
        if (a[1] < b[1]) {
          return -1
        }
        if (a[1] > b[1]) {
          return 1
        }
        return 0
      })
      .map(c => c[0])

    const options = Object.assign(
      {
        shouldSort: true,
        threshold: 0.6,
        location: 0,
        distance: 100,
        maxPatternLength: 32,
        minMatchCharLength: 1,
        keys: ['name', 'callingCode'],
        id: 'cca2'
      },
      this.props.filterOptions
    )
    const fuseList = countryList!.reduce(
      (acc: FuseCountry[], item: CCA2Code) => [
        ...acc,
        {
          id: item,
          name: this.getCountryName(countries[item]),
          callingCode: this.getCallingCode(countries[item])
        }
      ],
      []
    )

    this.fuse = new Fuse<FuseCountry>(fuseList, options)

    this.state = {
      modalVisible: false,
      cca2List: countryList,
      flatListMap: fuseList,
      filter: '',
      letters: this.getLetters(countryList!)
    }
  }

  componentDidUpdate(prevProps: CountryPickerProps) {
    if (prevProps.countryList !== this.props.countryList) {
      this.setState({
        cca2List: this.props.countryList
      })
    }
  }

  onSelectCountry(cca2: string) {
    this.setState({
      modalVisible: false,
      filter: '',
      flatListMap: this.state.cca2List!.map(n => ({ key: n }))
    })

    this.props.onChange({
      cca2,
      ...countries[cca2],
      flag: undefined,
      name: this.getCountryName(countries[cca2])
    })
  }

  onClose = () => {
    this.setState({
      modalVisible: false,
      filter: ''
    })
    if (this.props.onClose) {
      this.props.onClose()
    }
  }

  getCountryName(country?: FuseCountry) {
    if (!country) {
      return ''
    }
    const translation = optionalTranslation || this.props.translation
    return (translation && country.name[translation!]) || country.name.common
  }

  getCallingCode(country: Country) {
    return country.callingCode
  }

  setVisibleListHeight(offset: number) {
    this.visibleListHeight = getHeightPercent(100) - offset
  }

  getLetters(list: string[]) {
    return Object.keys(
      list.reduce(
        (acc, val) => ({
          ...acc,
          [this.getCountryName(countries[val])
            .slice(0, 1)
            .toUpperCase()]: ''
        }),
        {}
      )
    ).sort()
  }

  openModal = () => {
    this.setState({ modalVisible: true })
  }

  scrollTo(letter: string) {
    // find position of first country that starts with letter
    const index = this.state
      .cca2List!.map(country => this.getCountryName(countries[country])[0])
      .indexOf(letter)
    if (index === -1) {
      return
    }
    let position = index * this.itemHeight

    // do not scroll past the end of the list
    if (
      this.visibleListHeight &&
      position + this.visibleListHeight > this.listHeight
    ) {
      position = this.listHeight - this.visibleListHeight
    }

    this._flatList.current!.scrollToIndex({ index })
  }

  handleFilterChange = (value: string) => {
    const filteredCountries =
      value === '' ? this.state.cca2List : this.fuse.search(value)
    this._flatList.current!.scrollToOffset({ offset: 0 })

    this.setState({
      filter: value,
      flatListMap: filteredCountries.map((n: any) => ({ key: n }))
    })
  }

  renderCountry = (data: ListRenderItemInfo<FuseCountry>) => {
    const country = countries[data.item.id]

    return (
      <TouchableOpacity
        key={`${data.index}-${data.item.id}`}
        onPress={() => this.onSelectCountry(data.item.id)}
        activeOpacity={0.99}
        testID={`country-selector-${country.name.common}`}
      >
        {this.renderCountryDetail(data.item)}
      </TouchableOpacity>
    )
  }

  renderLetters(letter: string, index: number) {
    return (
      <TouchableOpacity
        testID={`letter-${letter}`}
        key={index}
        onPress={() => this.scrollTo(letter)}
        activeOpacity={0.6}
      >
        <View style={styles.letter}>
          <Text style={styles.letterText} allowFontScaling={false}>
            {letter}
          </Text>
        </View>
      </TouchableOpacity>
    )
  }

  renderCountryDetail(country: FuseCountry) {
    return (
      <View style={styles.itemCountry}>
        {!this.props.hideCountryFlag &&
          renderFlag(
            country.id,
            styles.itemCountryFlag,
            styles.emojiFlag,
            styles.imgStyle
          )}
        <View style={styles.itemCountryName}>
          <Text style={styles.countryName} allowFontScaling={false}>
            {this.getCountryName(country)}
            {this.props.showCallingCode &&
              country.callingCode &&
              ` (+${country.callingCode})`}
          </Text>
        </View>
      </View>
    )
  }

  renderFilter = () => {
    const {
      autoFocusFilter,
      filterPlaceholder,
      filterPlaceholderTextColor
    } = this.props

    const value = this.state.filter
    const onChange = this.handleFilterChange

    return (
      <TextInput
        testID="text-input-country-filter"
        autoFocus={autoFocusFilter}
        autoCorrect={false}
        placeholder={filterPlaceholder}
        placeholderTextColor={filterPlaceholderTextColor}
        style={[styles.input, !this.props.closeable && styles.inputOnly]}
        onChangeText={onChange}
        value={value}
      />
    )
  }

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity
          disabled={this.props.disabled}
          onPress={() => this.setState({ modalVisible: true })}
          activeOpacity={0.7}
        >
          {this.props.children ? (
            this.props.children
          ) : (
            <View
              style={[styles.touchFlag, { marginTop: isEmojiable ? 0 : 5 }]}
            >
              {this.props.showCountryNameWithFlag &&
                renderFlagWithName(
                  this.props.cca2,
                  this.getCountryName(countries[this.props.cca2]),
                  styles.itemCountryFlag,
                  styles.emojiFlag,
                  styles.imgStyle
                )}

              {!this.props.showCountryNameWithFlag &&
                renderFlag(
                  this.props.cca2,
                  styles.itemCountryFlag,
                  styles.emojiFlag,
                  styles.imgStyle
                )}
            </View>
          )}
        </TouchableOpacity>
        <Modal
          transparent={this.props.transparent}
          animationType={this.props.animationType}
          visible={this.state.modalVisible}
          onRequestClose={() => this.setState({ modalVisible: false })}
        >
          <SafeAreaView style={styles.modalContainer}>
            <View style={styles.header}>
              {this.props.closeable && (
                <CloseButton
                  image={this.props.closeButtonImage}
                  style={styles.closeButton}
                  imageStyle={styles.closeButtonImage}
                  onPress={() => this.onClose()}
                />
              )}
              {this.props.filterable && this.renderFilter()}
            </View>
            <KeyboardAvoidingView behavior="padding" enabled>
              <View style={styles.contentContainer}>
                <FlatList
                  testID="list-countries"
                  keyboardShouldPersistTaps="handled"
                  data={this.state.flatListMap}
                  ref={this._flatList}
                  initialNumToRender={30}
                  onScrollToIndexFailed={() => {}}
                  renderItem={this.renderCountry}
                  keyExtractor={item => item.id}
                  getItemLayout={(_data: any, index) => ({
                    length: this.itemHeight,
                    offset: this.itemHeight * index,
                    index
                  })}
                />
                {!this.props.hideAlphabetFilter && (
                  <ScrollView
                    contentContainerStyle={styles.letters}
                    keyboardShouldPersistTaps="always"
                  >
                    {this.state.filter === '' &&
                      this.state.letters.map((letter, index) =>
                        this.renderLetters(letter, index)
                      )}
                  </ScrollView>
                )}
              </View>
            </KeyboardAvoidingView>
          </SafeAreaView>
        </Modal>
      </View>
    )
  }
}
